#-------------------------------------------------------------------------------
# Author: Keith Brings
# Copyright (C) 2018 Noizu Labs, Inc. All rights reserved.
#-------------------------------------------------------------------------------

defmodule Noizu.SimplePool.EventEntryTests do

  @tag capture_log: true
  test "service events" do
    ref = Noizu.SimplePool.TestHelpers.unique_ref(:two)
    TestTwoPool.Server.test_s_call!(ref, :bannana, @context)
    TestTwoPool.Server.kill!(ref, @context)
    Process.sleep(100)
    [start_event, terminate_event] = Noizu.SimplePool.Database.Dispatch.MonitorTable.read!(ref)
    assert start_event.event == :start
    assert terminate_event.event == :terminate

    service_events = Noizu.SimplePool.Database.MonitoringFramework.Service.EventTable.read!({:"second@127.0.0.1", Noizu.SimplePool.Support.TestTwoPool})
    start_event = List.first(service_events)
    assert start_event.entity.identifier == :start
  end


  @tag capture_log: true
  test "record events pipes to log output" do
    assert capture_log(fn ->
      ref = Noizu.SimplePool.TestHelpers.unique_ref()
      Noizu.SimplePool.Support.TestPool.Server.fetch(ref, :process, @context)
      Process.sleep(500)
    end) =~ "[RecordEvent :start]"
  end



  @tag capture_log: true
  test "basic_functionality health check - degraded" do
    ref = Noizu.SimplePool.TestHelpers.unique_ref()
    Noizu.SimplePool.Support.TestPool.Server.fetch(ref, :process, @context)

    # simulate 3 recent crashes
    for _i <- 1..3 do
      Process.sleep(1000)
      Noizu.SimplePool.Support.TestPool.Server.kill!(ref, @context)
      {_r,_p, _s} = wait_for_restart(ref)
      # Force sleep so that terminate/start entries are unique (have different time entry)
    end

    Process.sleep(1000)
    r = Noizu.SimplePool.Support.TestPool.Server.health_check!(ref, @context)
    assert r.status == :degraded
    assert r.event_frequency.start == 4
    assert r.event_frequency.terminate == 3
    #assert r.event_frequency.exit >= 3
  end

  @tag capture_log: true
  test "basic_functionality health check - critical" do
    ref = Noizu.SimplePool.TestHelpers.unique_ref()
    Noizu.SimplePool.Support.TestPool.Server.fetch(ref, :process, @context)

    # simulate 3 recent crashes
    for _i <- 1..5 do
      Process.sleep(1000)
      Noizu.SimplePool.Support.TestPool.Server.kill!(ref, @context)
      {_r,_p, _s} = wait_for_restart(ref)
      # Force sleep so that terminate/start entries are unique (have different time entry)
    end

    Process.sleep(1000)
    r = Noizu.SimplePool.Support.TestPool.Server.health_check!(ref, @context)
    assert r.status == :critical
  end

end
